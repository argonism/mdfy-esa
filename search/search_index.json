{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#mdfy-esa","title":"mdfy-esa","text":"<p>mdfy plugin for esa</p> <ul> <li>Documentation: https://argonism.github.io/mdfy-esa</li> <li>GitHub: https://github.com/argonism/mdfy-esa</li> <li>PyPI: https://pypi.org/project/mdfy-esa/</li> <li>Free software: MIT</li> </ul>"},{"location":"#pre-requirement","title":"Pre-requirement","text":"<p>You need set esa.io API token and set it to environment veriable ESA_ACCESS_TOKEN.</p> <pre><code>export ESA_ACCESS_TOKEN=YOUR_ACCESS_TOKEN\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>The mdfy-esa feature supports uploading of local images and files. With the EsaMdfier, images or files designated with MdImage or MdLink are uploaded automatically. Simply pass the MdImage with the local image path, and voila - it\u2019s done!\"</p> <pre><code>from mdfy import MdImage, MdLink, MdText\nfrom mdfy_esa import EsaMdfier\n\nesa_team = \"your esa team name\"\npost_fullname = \"post name as you like\"\ncontents = [\n    MdText(\"This is a test article.\"),\n    MdImage(src=\"examples/test_image.png\"),\n    MdLink(url=\"examples/dummy.pdf\"),\n]\n\nmdfier = EsaMdfier(post_fullname=post_fullname, esa_team=esa_team)\ncreated_post_info = mdfier.write(contents=contents)\n\n# created_post_info = {'number': 4418, 'name': 'My Test Article', 'full_name': 'note/me/My Test Article', 'wip': True, 'body_md': 'This is a test article.\\n', 'body_html': '&lt;p data- ...}\n# see esa.io api document for detail\n# https://docs.esa.io/posts/102#POST%20/v1/teams/:team_name/posts\n</code></pre> <p>You can also update an existing post using its post number!</p> <pre><code>from mdfy import MdImage, MdLink, MdText\nfrom mdfy_esa import EsaMdfier\n\nesa_team = \"your esa team name\"\npost_number = 4930\ncontents = [\n    MdText(\"NEW! This post is updated!\"),\n    MdText(\"This is a test article.\"),\n    MdImage(src=\"examples/test_image.png\"),\n    MdLink(url=\"examples/dummy.pdf\"),\n]\n\nmdfier = EsaMdfier(post_number=post_number, esa_team=esa_team)\nupdated_post_info = mdfier.write(contents=contents)\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#040---2023-10-09","title":"[0.4.0] - 2023-10-09","text":"<ul> <li>Add post_params and **payloads params to EsaMdfier.write()<ul> <li>post_params<ul> <li>is expected to be used as additional parameters for the post.</li> <li>see https://docs.esa.io/posts/102#POST%20/v1/teams/:team_name/posts. Defaults to {}.</li> </ul> </li> <li>**payloads<ul> <li>offers access to piyo which is esa.io client library.</li> <li>see https://github.com/argonism/piyo/blob/master/piyo/client.py#L112 for details.</li> </ul> </li> </ul> </li> </ul>"},{"location":"changelog/#031---2023-10-09","title":"[0.3.1] - 2023-10-09","text":"<ul> <li>Remove print blended in</li> </ul>"},{"location":"changelog/#030---2023-10-07","title":"[0.3.0] - 2023-10-07","text":"<ul> <li>Modify min python version to 3.8</li> </ul>"},{"location":"changelog/#021---2023-10-07","title":"[0.2.1] - 2023-10-07","text":"<ul> <li>Modify EsaMdier docstrings</li> </ul>"},{"location":"changelog/#020---2023-10-07","title":"[0.2.0] - 2023-10-07","text":"<ul> <li>Add docstrings to stringify_element</li> </ul>"},{"location":"changelog/#011---2023-10-07","title":"[0.1.1] - 2023-10-07","text":"<ul> <li>Fix codecov</li> </ul>"},{"location":"changelog/#010---2023-10-02","title":"[0.1.0] - 2023-10-02","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/argonism/mdfy-esa/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>mdfy-esa could always use more documentation, whether as part of the official mdfy-esa docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/argonism/mdfy-esa/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>mdfy-esa</code> for local development.</p> <ol> <li>Fork the <code>mdfy-esa</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/mdfy-esa.git\n</code></pre> </li> <li> <p>Ensure poetry is installed.</p> </li> <li> <p>Install dependencies and start your virtualenv:</p> <pre><code>$ poetry install -E test -E doc -E dev\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <pre><code>$ poetry run tox\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check    https://github.com/argonism/mdfy-esa/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>$ poetry run pytest tests/test_mdfy_esa.py\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>$ poetry run bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install mdfy-esa, run this command in your terminal:</p> <pre><code>$ pip install mdfy-esa\n</code></pre> <p>This is the preferred method to install mdfy-esa, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for mdfy-esa can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/argonism/mdfy-esa\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/argonism/mdfy-esa/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ pip install .\n</code></pre>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#mdfy_esa.mdfy_esa.EsaMdfier","title":"<code>EsaMdfier</code>","text":"<p>             Bases: <code>Mdfier</code></p> <p>A class to modify Markdown files and upload images to Esa.</p> <p>Parameters:</p> Name Type Description Default <code>post_fullname</code> <code>Optional[str]</code> <p>The full name of the post to modify.</p> <code>None</code> <code>post_number</code> <code>Optional[int]</code> <p>The number of the post to update.</p> <code>None</code> <code>esa_team</code> <code>Optional[str]</code> <p>The name of the Esa team. Defaults to None. you can set this param or the environment variable ESA_TEAM.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If esa_team param or the environment variable ESA_TEAM is not set.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from mdfy import MdImage, MdLink, MdText\n&gt;&gt;&gt; from mdfy_esa import EsaMdfier\n&gt;&gt;&gt; contents = [\n...     MdText(\"This is a test article.\"),\n...     MdImage(src=\"example/test_image.png\"),\n...     MdLink(url=\"example/dummy.pdf\"),\n... ]\n&gt;&gt;&gt; mdfier = EsaMdfier(post_fullname=\"note/me/My Test Article\", esa_team=\"test_team\")\n&gt;&gt;&gt; mdfier.write(contents=contents)\n</code></pre> Source code in <code>mdfy_esa/mdfy_esa.py</code> <pre><code>class EsaMdfier(Mdfier):\n    \"\"\"A class to modify Markdown files and upload images to Esa.\n\n    Args:\n        post_fullname (Optional[str], optional): The full name of the post to modify.\n        post_number (Optional[int], optional): The number of the post to update.\n        esa_team (Optional[str], optional): The name of the Esa team. Defaults to None.\n            you can set this param or the environment variable ESA_TEAM.\n\n    Raises:\n        ValueError: If esa_team param or the environment variable ESA_TEAM is not set.\n\n    Examples:\n        &gt;&gt;&gt; from mdfy import MdImage, MdLink, MdText\n        &gt;&gt;&gt; from mdfy_esa import EsaMdfier\n        &gt;&gt;&gt; contents = [\n        ...     MdText(\"This is a test article.\"),\n        ...     MdImage(src=\"example/test_image.png\"),\n        ...     MdLink(url=\"example/dummy.pdf\"),\n        ... ]\n        &gt;&gt;&gt; mdfier = EsaMdfier(post_fullname=\"note/me/My Test Article\", esa_team=\"test_team\")\n        &gt;&gt;&gt; mdfier.write(contents=contents)\n    \"\"\"\n\n    def __init__(\n        self,\n        post_fullname: Optional[str] = None,\n        post_number: Optional[int] = None,\n        esa_team: Optional[str] = None,\n    ) -&gt; None:\n        \"\"\"Initializes the EsaMdfier class.\n\n        Args:\n            post_fullname (Optional[str], optional): The path to the post to modify.\n            post_number (Optional[int], optional): The number of the post to update.\n            esa_team (Optional[str], optional): The name of the Esa team. Defaults to None.\n        \"\"\"\n        self.post_fullname = post_fullname\n        self.post_number = post_number\n        if self.post_fullname is None and self.post_number is None:\n            raise ValueError(\"Either post_fullname or post_number must be set. Please set one of them.\")\n\n        self.team = os.environ['ESA_TEAM'] if \"ESA_TEAM\" in os.environ else esa_team\n        if self.team is None:\n            raise ValueError(\"ESA_TEAM is not set. Please set esa_team param or the environment variable ESA_TEAM.\")\n\n        self.client = piyo.Client(current_team=self.team)\n\n    def stringify_element(self, element: Union[MdElement, str]) -&gt; str:\n        \"\"\"Converts the given element to a string.\n\n        Args:\n            element (Union[MdElement, str]): The element to convert.\n\n        Returns:\n            str: The converted string.\n        \"\"\"\n        if isinstance(element, MdImage):\n            url = self.client.upload_file(element.src)\n            element.src = url\n        elif isinstance(element, MdLink):\n            parsed_result = urlparse(element.url)\n            if parsed_result.scheme == \"\":\n                url = self.client.upload_file(element.url)\n            elif parsed_result.scheme == \"file\":\n                url = self.client.upload_file(parsed_result.path)\n            element.url = url\n        return str(element)\n\n    def write(\n        self,\n        contents: Union[List[Union[str, MdElement]], MdElement],\n        post_params: Dict[str, Any] = {},\n        **payloads: Optional[Dict[str, Any]],\n    ) -&gt; Dict[str, Any]:\n        \"\"\"post the given Markdown content to esa.io.\n\n        Args:\n            contents (Union[List[Union[str, MdElement]], MdElement]):\n                The Markdown content to write to the file.\n            post_params (Dict[str, Any], optional): Additional parameters for the post. see https://docs.esa.io/posts/102#POST%20/v1/teams/:team_name/posts. Defaults to {}.\n            **payloads (Optional[Dict[str, Any]]): Additional parameters for piyo see https://github.com/argonism/piyo/blob/master/piyo/client.py#L112.\n        \"\"\"\n\n        if not isinstance(contents, list):\n            contents = [contents]\n\n        markdown = \"\"\n        for content in contents:\n            content_md = self.stringify_element(content)\n            markdown += content_md + \"\\n\"\n\n        if self.post_fullname:\n            post_data = {\"post\": {\"name\": self.post_fullname, \"body_md\": markdown, **post_params}}\n            return self.client.create_post(post_data, **payloads)\n        elif self.post_number:\n            update_data = {\"post\": {\"body_md\": markdown, **post_params}}\n            return self.client.update_post(self.post_number, update_data, **payloads)\n        else:\n            raise ValueError(\"Either post_fullname or post_number must be set. Please set one of them.\")\n</code></pre>"},{"location":"modules/#mdfy_esa.mdfy_esa.EsaMdfier.__init__","title":"<code>__init__(post_fullname=None, post_number=None, esa_team=None)</code>","text":"<p>Initializes the EsaMdfier class.</p> <p>Parameters:</p> Name Type Description Default <code>post_fullname</code> <code>Optional[str]</code> <p>The path to the post to modify.</p> <code>None</code> <code>post_number</code> <code>Optional[int]</code> <p>The number of the post to update.</p> <code>None</code> <code>esa_team</code> <code>Optional[str]</code> <p>The name of the Esa team. Defaults to None.</p> <code>None</code> Source code in <code>mdfy_esa/mdfy_esa.py</code> <pre><code>def __init__(\n    self,\n    post_fullname: Optional[str] = None,\n    post_number: Optional[int] = None,\n    esa_team: Optional[str] = None,\n) -&gt; None:\n    \"\"\"Initializes the EsaMdfier class.\n\n    Args:\n        post_fullname (Optional[str], optional): The path to the post to modify.\n        post_number (Optional[int], optional): The number of the post to update.\n        esa_team (Optional[str], optional): The name of the Esa team. Defaults to None.\n    \"\"\"\n    self.post_fullname = post_fullname\n    self.post_number = post_number\n    if self.post_fullname is None and self.post_number is None:\n        raise ValueError(\"Either post_fullname or post_number must be set. Please set one of them.\")\n\n    self.team = os.environ['ESA_TEAM'] if \"ESA_TEAM\" in os.environ else esa_team\n    if self.team is None:\n        raise ValueError(\"ESA_TEAM is not set. Please set esa_team param or the environment variable ESA_TEAM.\")\n\n    self.client = piyo.Client(current_team=self.team)\n</code></pre>"},{"location":"modules/#mdfy_esa.mdfy_esa.EsaMdfier.stringify_element","title":"<code>stringify_element(element)</code>","text":"<p>Converts the given element to a string.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Union[MdElement, str]</code> <p>The element to convert.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The converted string.</p> Source code in <code>mdfy_esa/mdfy_esa.py</code> <pre><code>def stringify_element(self, element: Union[MdElement, str]) -&gt; str:\n    \"\"\"Converts the given element to a string.\n\n    Args:\n        element (Union[MdElement, str]): The element to convert.\n\n    Returns:\n        str: The converted string.\n    \"\"\"\n    if isinstance(element, MdImage):\n        url = self.client.upload_file(element.src)\n        element.src = url\n    elif isinstance(element, MdLink):\n        parsed_result = urlparse(element.url)\n        if parsed_result.scheme == \"\":\n            url = self.client.upload_file(element.url)\n        elif parsed_result.scheme == \"file\":\n            url = self.client.upload_file(parsed_result.path)\n        element.url = url\n    return str(element)\n</code></pre>"},{"location":"modules/#mdfy_esa.mdfy_esa.EsaMdfier.write","title":"<code>write(contents, post_params={}, **payloads)</code>","text":"<p>post the given Markdown content to esa.io.</p> <p>Parameters:</p> Name Type Description Default <code>contents</code> <code>Union[List[Union[str, MdElement]], MdElement]</code> <p>The Markdown content to write to the file.</p> required <code>post_params</code> <code>Dict[str, Any]</code> <p>Additional parameters for the post. see https://docs.esa.io/posts/102#POST%20/v1/teams/:team_name/posts. Defaults to {}.</p> <code>{}</code> <code>**payloads</code> <code>Optional[Dict[str, Any]]</code> <p>Additional parameters for piyo see https://github.com/argonism/piyo/blob/master/piyo/client.py#L112.</p> <code>{}</code> Source code in <code>mdfy_esa/mdfy_esa.py</code> <pre><code>def write(\n    self,\n    contents: Union[List[Union[str, MdElement]], MdElement],\n    post_params: Dict[str, Any] = {},\n    **payloads: Optional[Dict[str, Any]],\n) -&gt; Dict[str, Any]:\n    \"\"\"post the given Markdown content to esa.io.\n\n    Args:\n        contents (Union[List[Union[str, MdElement]], MdElement]):\n            The Markdown content to write to the file.\n        post_params (Dict[str, Any], optional): Additional parameters for the post. see https://docs.esa.io/posts/102#POST%20/v1/teams/:team_name/posts. Defaults to {}.\n        **payloads (Optional[Dict[str, Any]]): Additional parameters for piyo see https://github.com/argonism/piyo/blob/master/piyo/client.py#L112.\n    \"\"\"\n\n    if not isinstance(contents, list):\n        contents = [contents]\n\n    markdown = \"\"\n    for content in contents:\n        content_md = self.stringify_element(content)\n        markdown += content_md + \"\\n\"\n\n    if self.post_fullname:\n        post_data = {\"post\": {\"name\": self.post_fullname, \"body_md\": markdown, **post_params}}\n        return self.client.create_post(post_data, **payloads)\n    elif self.post_number:\n        update_data = {\"post\": {\"body_md\": markdown, **post_params}}\n        return self.client.update_post(self.post_number, update_data, **payloads)\n    else:\n        raise ValueError(\"Either post_fullname or post_number must be set. Please set one of them.\")\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>To use mdfy-esa in a project</p> <pre><code>import mdfy_esa\nrom mdfy import MdImage, MdLink, MdText\nfrom mdfy_esa import EsaMdfier\ncontents = [\n    MdText(\"This is a test article.\"),\n    MdImage(src=\"example/test_image.png\"),\n    MdLink(url=\"example/dummy.pdf\"),\n]\nmdfier = EsaMdfier(post_fullname=\"note/me/My Test Article\", esa_team=\"test_team\")\nmdfier.write(contents=contents)\n</code></pre>"}]}